// Here you can add other styles
.fc-button{
    text-transform: uppercase !important;
}
.fc-event{
    padding: 2px;
}
.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{
    width:unset !important;
}

input.mat-chip-input{
    flex: 1 0 30px !important;
}

/*Loader Start*/
$count: 10;
$time: 2; //in seconds
$size: 100;
$color: #ffffff;

.holder {
  position: absolute;
  left: 0px;
  top: 0px;
  bottom: 0px;
  right: 0px;
  width: 100%;
  height: 100%;
  background-color: #2D2F48;
  z-index: 100000;
  opacity: 0.6;
}

.preloader {
  /* size */
  width: $size + px;
  height: $size + px;
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translateX(-50%) translateY(-50%);
  animation: rotatePreloader $time + s infinite ease-in;
}
@keyframes rotatePreloader {
  0% {
  transform: translateX(-50%) translateY(-50%) rotateZ(0deg);
  }
  100% {
  transform: translateX(-50%) translateY(-50%) rotateZ(-360deg);
  }
}
.preloader div {
  position: absolute;
  width: 100%;
  height: 100%;
  opacity: 0;
}
.preloader div:before {
  content: "";
  position: absolute;
  left: 50%;
  top: 0%;
  width: 10%;
  height: 10%;
  background-color: $color;
  transform: translateX(-50%);
  border-radius: 50%;
}

@for $i from 1 through $count {
  .preloader div:nth-child(#{$i}) {
    transform: rotateZ(((360 / $count) * ($i - 1)) + deg);
    animation: rotateCircle + $i $time + s infinite linear;
    z-index: $count - $i;
  }
  @keyframes rotateCircle#{$i} {
    #{percentage(((50 / $count) * ($i - 1)) / 100)} {
      opacity: 0;
    }
    #{percentage((((50 / $count) + 0.0001) * ($i - 1)) / 100)} {
      opacity: 1;
      transform: rotateZ((0 - ((360 / $count) * ($i - 2))) + deg);
    }
    #{percentage((((50 / $count) * ($i - 0)) + 2) / 100)} {
      transform: rotateZ((0 - ((360 / $count) * ($i - 1))) + deg);
    }
    #{percentage(((50 + ((50 / $count) * ($i - 0))) + 2) / 100)} {
      transform: rotateZ((0 - ((360 / $count) * ($i - 1))) + deg);
    }
    100% {
      transform: rotateZ((0 - ((360 / $count) * ($count - 1))) + deg);
      opacity: 1;
    }
  }
}
/*Loader End*/


.expansion-header-custom .mat-expansion-panel-header, .expansion-header-custom .mat-expansion-panel-header:hover{
  background: #d2d9d9 !important;
  padding: 0 15px;
  height: 48px !important;
}

.expansion-header-custom .mat-expansion-panel-header-title{
  margin-top: 5px;
}

.m-t-20 {
  margin-top: 20px;
}
.m-t-10 {
  margin-top: 10px;
}
.m-b-10 {
  margin-bottom: 10px;
}
.m-l-10 {
  margin-left: 10px !important;
}
.task-add-btn {
  font-size: 18px;
  background: #fff;
  width: 35px !important;
  height: 35px !important;
}
.cdk-overlay-container {
  z-index: 9999 !important;
}
.mat-tab-body-content{
  overflow: hidden !important;
}
.mat-dialog-container{
  padding-top: 0px !important;
}